{"remainingRequest":"/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/node_modules/babel-loader/lib/index.js!/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/node_modules/eslint-loader/index.js??ref--13-0!/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/src/basic/floorView.js","dependencies":[{"path":"/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/src/basic/floorView.js","mtime":1617804612890},{"path":"/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { max, min } from \"d3-array\";\nimport { svg } from \"d3-fetch\";\nimport { select } from \"d3-selection\";\nimport \"../assets/structure_1.svg\";\nimport \"../assets/beam_1.svg\"; // import s from \"../assets/arrow.svg\";\n\nvar PartImage = /*#__PURE__*/function () {\n  function PartImage(props) {\n    _classCallCheck(this, PartImage);\n\n    var image = props.image,\n        relWidth = props.relWidth,\n        relHeight = props.relHeight,\n        transfer = props.transfer,\n        scale = props.scale;\n    this.image = \"/img/\".concat(image);\n    var x = transfer.x,\n        y = transfer.y;\n    this.transferX = x * scale;\n    this.transferY = y * scale;\n    this.relWidth = relWidth;\n    this.relHeight = relHeight;\n    this.scale = scale;\n  }\n\n  _createClass(PartImage, [{\n    key: \"render\",\n    value: function () {\n      var _render = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var partSvg, partGroup;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return svg(this.image);\n\n              case 2:\n                partSvg = _context.sent;\n                partGroup = select(partSvg.documentElement);\n                partGroup.attr(\"viewBox\", \"0 0 \".concat(partGroup.attr(\"width\"), \" \").concat(partGroup.attr(\"height\"))).attr(\"width\", this.scale * this.relWidth).attr(\"height\", this.scale * this.relHeight);\n                return _context.abrupt(\"return\", partGroup);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function render() {\n        return _render.apply(this, arguments);\n      }\n\n      return render;\n    }()\n  }]);\n\n  return PartImage;\n}();\n\nvar ThreeView = /*#__PURE__*/function () {\n  function ThreeView(props) {\n    var _this = this;\n\n    _classCallCheck(this, ThreeView);\n\n    var container = props.container,\n        width = props.width,\n        height = props.height,\n        parts = props.parts;\n    this.container = container;\n    this.width = width;\n    this.height = height;\n    this.parts = parts || [];\n    this.svg = select(container).append(\"svg\").attr(\"style\", \"background: lightgrey\").attr(\"width\", width).attr(\"height\", height);\n    var maxRelWidth = max(parts, function (item) {\n      return item.relWidth;\n    });\n    var maxRelHeight = max(parts, function (item) {\n      return item.relHeight;\n    });\n    this.scale = min([width / maxRelWidth, height / maxRelHeight]);\n    this.partImages = this.parts.map(function (item) {\n      return new PartImage(_objectSpread(_objectSpread({}, item), {}, {\n        scale: _this.scale\n      }));\n    });\n  }\n\n  _createClass(ThreeView, [{\n    key: \"render\",\n    value: function () {\n      var _render2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.partImages.forEach( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(item) {\n                    var partGroup;\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return item.render();\n\n                          case 2:\n                            partGroup = _context2.sent;\n\n                            _this2.svg.append(\"g\").attr('transform', \"translate(\".concat(item.transferX, \" \").concat(item.transferY, \")\")).append(function () {\n                              return partGroup.node();\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function render() {\n        return _render2.apply(this, arguments);\n      }\n\n      return render;\n    }()\n  }]);\n\n  return ThreeView;\n}();\n\nexport { ThreeView as default };",{"version":3,"sources":["/Users/yanheng/Documents/work/web/terino-drawing-engine-d3/src/basic/floorView.js"],"names":["max","min","svg","select","PartImage","props","image","relWidth","relHeight","transfer","scale","x","y","transferX","transferY","partSvg","partGroup","documentElement","attr","ThreeView","container","width","height","parts","append","maxRelWidth","item","maxRelHeight","partImages","map","forEach","render","node"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,GAAd,QAAyB,UAAzB;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA;AACA,8B,CACA;;IAEMC,S;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,QACTC,KADS,GACuCD,KADvC,CACTC,KADS;AAAA,QACFC,QADE,GACuCF,KADvC,CACFE,QADE;AAAA,QACQC,SADR,GACuCH,KADvC,CACQG,SADR;AAAA,QACmBC,QADnB,GACuCJ,KADvC,CACmBI,QADnB;AAAA,QAC6BC,KAD7B,GACuCL,KADvC,CAC6BK,KAD7B;AAEjB,SAAKJ,KAAL,kBAAqBA,KAArB;AAFiB,QAGTK,CAHS,GAGDF,QAHC,CAGTE,CAHS;AAAA,QAGNC,CAHM,GAGDH,QAHC,CAGNG,CAHM;AAIjB,SAAKC,SAAL,GAAiBF,CAAC,GAAGD,KAArB;AACA,SAAKI,SAAL,GAAiBF,CAAC,GAAGF,KAArB;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKE,KAAL,GAAaA,KAAb;AACD;;;;;4EAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACwBR,GAAG,CAAC,KAAKI,KAAN,CAD3B;;AAAA;AACQS,gBAAAA,OADR;AAEQC,gBAAAA,SAFR,GAEoBb,MAAM,CAACY,OAAO,CAACE,eAAT,CAF1B;AAGED,gBAAAA,SAAS,CACNE,IADH,CAEI,SAFJ,gBAGWF,SAAS,CAACE,IAAV,CAAe,OAAf,CAHX,cAGsCF,SAAS,CAACE,IAAV,CAAe,QAAf,CAHtC,GAKGA,IALH,CAKQ,OALR,EAKiB,KAAKR,KAAL,GAAa,KAAKH,QALnC,EAMGW,IANH,CAMQ,QANR,EAMkB,KAAKR,KAAL,GAAa,KAAKF,SANpC;AAHF,iDAUSQ,SAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;IAcmBG,S;AACnB,qBAAYd,KAAZ,EAAmB;AAAA;;AAAA;;AAAA,QACTe,SADS,GAC2Bf,KAD3B,CACTe,SADS;AAAA,QACEC,KADF,GAC2BhB,KAD3B,CACEgB,KADF;AAAA,QACSC,MADT,GAC2BjB,KAD3B,CACSiB,MADT;AAAA,QACiBC,KADjB,GAC2BlB,KAD3B,CACiBkB,KADjB;AAEjB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAK,IAAI,EAAtB;AAEA,SAAKrB,GAAL,GAAWC,MAAM,CAACiB,SAAD,CAAN,CACRI,MADQ,CACD,KADC,EAERN,IAFQ,CAEH,OAFG,EAEM,uBAFN,EAGRA,IAHQ,CAGH,OAHG,EAGMG,KAHN,EAIRH,IAJQ,CAIH,QAJG,EAIOI,MAJP,CAAX;AAMA,QAAMG,WAAW,GAAGzB,GAAG,CAACuB,KAAD,EAAQ,UAACG,IAAD;AAAA,aAAUA,IAAI,CAACnB,QAAf;AAAA,KAAR,CAAvB;AACA,QAAMoB,YAAY,GAAG3B,GAAG,CAACuB,KAAD,EAAQ,UAACG,IAAD;AAAA,aAAUA,IAAI,CAAClB,SAAf;AAAA,KAAR,CAAxB;AACA,SAAKE,KAAL,GAAaT,GAAG,CAAC,CAACoB,KAAK,GAAGI,WAAT,EAAsBH,MAAM,GAAGK,YAA/B,CAAD,CAAhB;AAEA,SAAKC,UAAL,GAAkB,KAAKL,KAAL,CAAWM,GAAX,CAChB,UAACH,IAAD;AAAA,aAAU,IAAItB,SAAJ,iCAAmBsB,IAAnB;AAAyBhB,QAAAA,KAAK,EAAE,KAAI,CAACA;AAArC,SAAV;AAAA,KADgB,CAAlB;AAGD;;;;;6EAED;AAAA;;AAAA;AAAA;AAAA;AAAA;AACE,qBAAKkB,UAAL,CAAgBE,OAAhB;AAAA,qFAAwB,kBAAOJ,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACEA,IAAI,CAACK,MAAL,EADF;;AAAA;AAChBf,4BAAAA,SADgB;;AAEtB,4BAAA,MAAI,CAACd,GAAL,CACGsB,MADH,CACU,GADV,EAEGN,IAFH,CAEQ,WAFR,sBAEkCQ,IAAI,CAACb,SAFvC,cAEoDa,IAAI,CAACZ,SAFzD,QAGGU,MAHH,CAGU;AAAA,qCAAMR,SAAS,CAACgB,IAAV,EAAN;AAAA,6BAHV;;AAFsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAxB;;AAAA;AAAA;AAAA;AAAA;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;SAvBmBb,S","sourcesContent":["import { max, min } from \"d3-array\";\nimport { svg } from \"d3-fetch\";\nimport { select } from \"d3-selection\";\nimport \"../assets/structure_1.svg\";\nimport \"../assets/beam_1.svg\";\n// import s from \"../assets/arrow.svg\";\n\nclass PartImage {\n  constructor(props) {\n    const { image, relWidth, relHeight, transfer, scale } = props;\n    this.image = `/img/${image}`;\n    const { x, y} = transfer;\n    this.transferX = x * scale;\n    this.transferY = y * scale;\n    this.relWidth = relWidth;\n    this.relHeight = relHeight;\n    this.scale = scale;\n  }\n\n  async render() {\n    const partSvg = await svg(this.image);\n    const partGroup = select(partSvg.documentElement);\n    partGroup\n      .attr(\n        \"viewBox\",\n        `0 0 ${partGroup.attr(\"width\")} ${partGroup.attr(\"height\")}`\n      )\n      .attr(\"width\", this.scale * this.relWidth)\n      .attr(\"height\", this.scale * this.relHeight);\n    return partGroup;\n  }\n}\n\nexport default class ThreeView {\n  constructor(props) {\n    const { container, width, height, parts } = props;\n    this.container = container;\n    this.width = width;\n    this.height = height;\n    this.parts = parts || [];\n\n    this.svg = select(container)\n      .append(\"svg\")\n      .attr(\"style\", \"background: lightgrey\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const maxRelWidth = max(parts, (item) => item.relWidth);\n    const maxRelHeight = max(parts, (item) => item.relHeight);\n    this.scale = min([width / maxRelWidth, height / maxRelHeight]);\n\n    this.partImages = this.parts.map(\n      (item) => new PartImage({ ...item, scale: this.scale })\n    );\n  }\n\n  async render() {\n    this.partImages.forEach(async (item) => {\n      const partGroup = await item.render();\n      this.svg\n        .append(\"g\")\n        .attr('transform', `translate(${item.transferX} ${item.transferY})`)\n        .append(() => partGroup.node());\n    });\n  }\n}\n"]}]}